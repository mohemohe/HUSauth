<Window x:Class="HUSauth.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:HUSauth.Views"
        xmlns:vm="clr-namespace:HUSauth.ViewModels"
        Title="HUSauth"
		AllowsTransparency="True" WindowStyle="None"
		Background="Transparent"
		Width="320"
		Height="177"
        Icon="Resource/HUSauth.ico"
        ShowInTaskbar="{Binding IsShowTaskBar}"
        Opacity="{Binding Opacity}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resource/MainWindowResourceDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Window.DataContext>
        <vm:MainWindowViewModel />
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize" />
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </i:EventTrigger>
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}" InvokeActionsOnlyWhileAttatchedObjectLoaded="True">
            <l:WindowInteractionMessageAction />
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger InvokeActionsOnlyWhileAttatchedObjectLoaded="True" MessageKey="Minimize" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction />
        </l:InteractionMessageTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
    </i:Interaction.Triggers>

    <Border BorderBrush="#FF007ACC" Background="#FF2D2D30"
			BorderThickness="1" Margin="10">
        <Border.Effect>
            <DropShadowEffect ShadowDepth="0" BlurRadius="8"
                              Color="#FF007ACC" />
        </Border.Effect>

        <Grid Name="MainGrid" ClipToBounds="True">
            <Grid Name="TitleBar" VerticalAlignment="Top" Height="auto">
                <Image HorizontalAlignment="Left" Height="28" VerticalAlignment="Top" RenderOptions.BitmapScalingMode="HighQuality" Source="Resource/HUSauth.png" />
                <Label Content="HUSauth" Margin="32,0,0,0" Width="auto" Height="auto" HorizontalAlignment="Left" VerticalAlignment="Top" FontFamily="Meiryo" Foreground="Gray" />
                <Label Content="{Binding version}" Margin="94,0,0,0" Width="auto" Height="auto" HorizontalAlignment="Left" VerticalAlignment="Top" FontFamily="Meiryo" Foreground="Gray" Padding="0,5,5,5" />

                <StackPanel Orientation="Horizontal" Margin="0,0,3,0" HorizontalAlignment="Right" VerticalAlignment="Top">
                    <Button Name="MinimizeButton" WindowChrome.IsHitTestVisibleInChrome="True" Width="28" Height="20" Margin="0" BorderBrush="{x:Null}" Template="{DynamicResource MinimizeButton}" Command="{Binding MinimizeWindowCommand, Mode=OneWay}">
                        <Label Content="0" FontFamily="Marlett" Foreground="White" />
                    </Button>
                    <Button Name="CloseButton"  WindowChrome.IsHitTestVisibleInChrome="True" Width="48" Height="20" Margin="0" BorderBrush="{x:Null}" Template="{DynamicResource CloseButton}" Command="{Binding CloseWindowCommand, Mode=OneWay}">
                        <Label Content="r" FontFamily="Marlett" Foreground="White" />
                    </Button>
                </StackPanel>
            </Grid>

            <Grid Name="Body" Margin="0,28,0,0">
                <Label Content="ID" Height="auto" Width="auto" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="10,10,0,0" RenderTransformOrigin="1.625,0.6" Foreground="White" />
                <TextBox Name="IDTextBox" Text="{Binding ID, Mode=TwoWay}" HorizontalAlignment="Left" Height="23" Margin="80,12,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="208" VerticalContentAlignment="Center" Background="#FF333333" BorderBrush="#FF666666" Foreground="White" />
                <Label Content="Password" Height="auto" Width="auto" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="10,39,0,0" RenderTransformOrigin="0.958,2.28" Foreground="White" />
                <PasswordBox Name="PWPasswordBox" Password="" HorizontalAlignment="Left" Height="23" Margin="80,40,0,0" VerticalAlignment="Top" Width="208" VerticalContentAlignment="Center" BorderBrush="#FF666666" Foreground="White" Background="#FF333333">
                    <i:Interaction.Behaviors>
                        <l:PasswordBoxBindingSupportBehavior Password="{Binding Password}" />
                    </i:Interaction.Behaviors>
                </PasswordBox>
                <Button Name="LoginButton" Content="Login" HorizontalAlignment="Right" Margin="0,68,10,0" VerticalAlignment="Top" Width="75" Template="{DynamicResource LoginButton}" FontFamily="Meiryo" Height="24" Command="{Binding LoginCommand, Mode=OneWay}" />
                <Button Name="ConfigButton" HorizontalAlignment="Left" Margin="0,80,0,0" VerticalAlignment="Top" Width="24" Template="{DynamicResource Button}" Command="{Binding ConfigCommand, Mode=OneWay}" Background="{x:Null}" Height="23" BorderBrush="{x:Null}" Foreground="{x:Null}">
                    <Image Source="Resource/Modern UI Icons/appbar.settings.png" Stretch="Fill" />
                </Button>
                <Button Name="AboutButton" HorizontalAlignment="Left" Margin="25,80,0,0" VerticalAlignment="Top" Width="24" Template="{DynamicResource Button}" Command="{Binding AboutCommand, Mode=OneWay}" Background="{x:Null}" Height="23" BorderBrush="{x:Null}" Foreground="{x:Null}">
                    <Image Source="Resource/Modern UI Icons/appbar.information.circle.png" Stretch="Fill" />
                </Button>
            </Grid>
            <Grid Name="StatusBar" Height="24" VerticalAlignment="Bottom" Background="#FF007ACC">
                <Label Content="{Binding StatusBarString, Mode=OneWay}" Foreground="White" FontFamily="Meiryo" />
            </Grid>
        </Grid>
    </Border>
</Window>